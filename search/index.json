[{"content":"Transformer-based Fusformer: https://github.com/J-FHu/Fusformer\n给了1000轮时候的预训练权重，可以直接测试\n我自己也有50-500轮的训练权重\n20张固定的CAVE中的图片训练，11张CAVE中的图片测试，10张Harvard图片测试\nMSST-Net: https://github.com/jx-mzc/MSST-Net\n同时提取空间信息和光谱信息\n没有给权重，但给了训练代码，参数量巨大\nCAVE上预训练，分别在CAVE和Harvard上微调\nPSRT: https://github.com/shangqideng/PSRT?tab=readme-ov-file\n仓库给了训练好的权重，应该可以直接测试\nCAVE上固定20张图片训练，11张图片测试\nHarvard上固定10张图片训练，10张图片测试\nHMF-Former: 无代码\nHyperTransformer: https://github.com/wgcban/HyperTransformer\n使用纹理特性，空间信息和光谱信息的交互，\n数据集不匹配，没有训练好的权重\n解决的问题是pansharpening: Pansharpening aims to fuse a registered high-resolution panchromatic image (PAN) with a low-resolution hyperspectral image (LR-HSI) to generate an enhanced HSI with high spectral and spatial resolution.\npansharpening用黑白图和多光谱图片，只能产生多光谱图像，不能产生高光谱图像\nMCT-Net: https://github.com/wxy11-27/MCT-Net\n空间信息和光谱信息的交互，模型结构比较复杂，参数量巨大\n没有给模型权重，数据集并非CAVE和Harvard\nDCTransformer: https://github.com/qingma2016/DCTransformer\n训练、测试要两张卡（？）\n采用swin-Transformer的block\n给出了200轮的权重，给了训练和测试代码，数据集一致\nNGST-Net: https://github.com/zsspo/NGST_fusion\n基于swin-Transformer，只有模型代码，没有给出训练、测试代码，数据集倒是能匹配上\nMIMO-SST https://github.com/Freelancefangjian/MIMO-SST\n数据集有CAVE，但无Harvard，混合空间信息和光谱信息的Transformer\nuHNTC和UMSFT https://github.com/Caoxuheng/HIFtool\n两种无监督的方法，来自同一个实验室，但好像没在代码库中找到这两个网络的代码\nCNN-based GuidedNet: 有代码，没权重，且为tensorflow\n实验范式: 很多论文都是遵从这篇论文中的实验范式：Model-Guided Deep Hyperspectral Image Super-Resolution\n","date":"2025-05-26T20:17:24+08:00","permalink":"https://DevDreamerCB.github.io/p/ms_hs_fusion/","title":"MS_HS_fusion"},{"content":"Python类与实用方法 object：In short, objects carry some things around with them. You access that stuff using Python\u0026rsquo;s dot syntax.\nClasses allow you to create user-defined data structures. Classes define functions called methods, which identify the behaviors and actions that an object created from the class can perform with its data.\n对象就是带着一些东西（比如函数）的物体，通过”.”语法访问这些东西\n图1 魔术方法：类的init 类中的init函数可以理解为定义这个类中的全局变量，用self.xxx来实现，代码如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from torch.utils.data import Dataset import cv2 import os from PIL import Image class MyData(Dataset): def __init__(self, root_dir, label_dir): super().__init__() self.root_dir = root_dir self.label_dir = label_dir self.path = os.path.join(self.root_dir, self.label_dir) self.img_path = os.listdir(self.path) def __getitem__(self, index): imgname = self.img_path[index] img_item_path = os.path.join(self.root_dir, self.label_dir, imgname) img = Image.open(img_item_path) label = self.label_dir return img, label def __len__(self): return len(self.img_path) root_dir = \u0026#34;数据集\\dataset\\hymenoptera_data\\\\train\u0026#34; ant_label_dir = \u0026#34;ants\u0026#34; bee_label_dir = \u0026#34;bees\u0026#34; ant_database = MyData(root_dir, ant_label_dir) bee_database = MyData(root_dir, bee_label_dir) img, label = ant_database[0] img.show() print(len(bee_database),label) 前后的__即为魔术方法，在类的实例化的时候自动调用\ncall 1 2 3 4 5 6 7 8 9 10 class People(): def __call__(self, name): print(\u0026#34;__call__\u0026#34; + \u0026#34; hello\u0026#34; + name) def hello(self, name): print(\u0026#34;hello\u0026#34; + name) person = People() person(\u0026#34;zhangsan\u0026#34;) person.hello(\u0026#34;zhangsan\u0026#34;) 方便调用与代码编写，但逻辑性变差\n类的继承与重构 什么时候使用继承：假如我需要定义几个类，而类与类之间有一些公共的属性和方法，这时我就可以把相同的属性和方法作为基类的成员，而特殊的方法及属性则在本类中定义。这样子类只需要继承基类（父类），子类就可以访问到基类（父类）的属性和方法了，它提高了代码的可扩展性和重用行。 一个example：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Animal(object): # python3中所有类都可以继承于object基类 def __init__(self, name, age): self.name = name self.age = age def call(self): print(self.name, \u0026#39;会叫\u0026#39;) ###### # 现在我们需要定义一个Cat 猫类继承于Animal，猫类比动物类多一个sex属性。 ###### class Cat(Animal): def __init__(self,name,age,sex): #super(Cat, self).__init__(name,age) # 不要忘记从Animal类引入属性 super().__init__(name,age) #python3.x中可以这样写 self.sex=sex if __name__ == \u0026#39;__main__\u0026#39;: # 单模块被引用时下面代码不会受影响，用于调试 c = Cat(\u0026#39;喵喵\u0026#39;, 2, \u0026#39;男\u0026#39;) # Cat继承了父类Animal的属性 c.call() # 输出 喵喵 会叫 ，Cat继承了父类Animal的方法 其中，Animal是父类，Cat是子类，在子类中初始化父类，需要用到super(Cat, self).init(name,age)\n类的重构 接着上面的例子，重构我理解为对父类的方法进行更改。\n1 2 3 4 5 6 7 8 9 10 11 classCat(Animal): def__init__(self, name, age, sex): super(Cat, self).__init__(name,age) self.sex= sex defcall(self): print(self.name,\u0026#39;会“喵喵”叫\u0026#39;) if __name__== \u0026#39;__main__\u0026#39;: c= Cat(\u0026#39;喵喵\u0026#39;, 2, \u0026#39;男\u0026#39;) c.call()# 输出：喵喵 会“喵喵”叫 这表明，当我们在子类中重构父类的方法后，子类的实例先会在自己的类中查找该方法，当找不到该方法时才会去父类 Animal 中查找对应的方法\n实例方法与类方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class MyClass: class_var = \u0026#34;类属性\u0026#34; # 类变量 def __init__(self, instance_val): self.instance_var = instance_val # 实例变量 # 实例方法（绑定到实例） def instance_method(self): print(f\u0026#34;实例方法调用，访问实例变量: {self.instance_var}\u0026#34;) # 可访问实例属性 print(f\u0026#34;实例方法中访问类变量: {self.class_var}\u0026#34;) # 通过实例访问类变量 # 类方法（绑定到类） @classmethod def class_method(cls): print(f\u0026#34;类方法调用，访问类变量: {cls.class_var}\u0026#34;) # 直接访问类属性 # print(cls.instance_var) # 此行会报错，类方法不能直接访问实例属性 # 创建实例 obj = MyClass(\u0026#34;实例属性值\u0026#34;) # 调用实例方法 obj.instance_method() # 输出: # 实例方法调用，访问实例变量: 实例属性值 # 实例方法中访问类变量: 类属性 # 调用类方法 MyClass.class_method() # 输出: # 类方法调用，访问类变量: 类属性 * 与 ** 解压或压缩序列（*）以及字典（**）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 def demo_function(a, b, *args, **kwargs): print(\u0026#34;必填参数 a:\u0026#34;, a) print(\u0026#34;必填参数 b:\u0026#34;, b) print(\u0026#34;位置参数 *args:\u0026#34;, args) print(\u0026#34;关键字参数 **kwargs:\u0026#34;, kwargs) # 定义参数列表和字典 args_list = (3, 4, 5) kwargs_dict = {\u0026#34;c\u0026#34;: 6, \u0026#34;d\u0026#34;: 7} # 使用 * 和 ** 解压参数 demo_function(1, 2, *args_list, **kwargs_dict) #必填参数 a: 1 #必填参数 b: 2 #位置参数 *args: (3, 4, 5) #关键字参数 **kwargs: {\u0026#39;c\u0026#39;: 6, \u0026#39;d\u0026#39;: 7} 或者：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def create_profile(**kwargs): print(f\u0026#39;name: {kwargs[\u0026#34;name\u0026#34;]}\u0026#39;) print(f\u0026#39;age: {kwargs[\u0026#34;age\u0026#34;]}\u0026#39;) print(f\u0026#39;email: {kwargs[\u0026#34;email\u0026#34;]}\u0026#39;) option ={ \u0026#39;name\u0026#39;:\u0026#39;tony\u0026#39;, \u0026#39;age\u0026#39;: 18, \u0026#39;email\u0026#39;:\u0026#39;tony@qq.com\u0026#39; } create_profile(**option) #or def create_profile(name, age,email): print(f\u0026#39;name: {name}\u0026#39;) print(f\u0026#39;age: {age}\u0026#39;) print(f\u0026#39;email: {email}\u0026#39;) option ={ \u0026#39;name\u0026#39;:\u0026#39;tony\u0026#39;, \u0026#39;age\u0026#39;: 18, \u0026#39;email\u0026#39;:\u0026#39;tony@qq.com\u0026#39; } create_profile(**option) #可以理解为解压后：name=tony，age=18，email=toney@qq.com 迭代器与生成器 https://huccihuang.github.io/posts/Python-从迭代器到生成器-小内存也能处理大数据/\n能够使用 for 循环迭代的对象叫可迭代对象\n用迭代器可以显著减少内存占用，一个基本的迭代器，包含两个魔术方法：iter__和__next。\n以读取一个文件为例\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class LineIterator: def __init__(self, filepath): self.file = open(filepath, \u0026#39;r\u0026#39;) def __iter__(self): return self def __next__(self): line = self.file.readline() if line: return line else: self.file.close() raise StopIteration line_iter = LineIterator(filepath) for line in line_iter: print(line) 为什么for循环可以处理迭代器？\nfor循环的本质：\n1 2 3 4 5 6 7 8 9 l = [1,2,3] it = iter(l) # 先从可迭代对象中获取迭代器 while True: # 然后使用一个循环 try: print(next(it)) # 对迭代器一直调用 next except StopIteration: # 直到捕获到 stopiteration break # 跳出循环 生成器：可以理解为迭代器的简单实现\n重点是关键字yield，自动产生__iter__和__next__。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 def generator(n): for i in range(n): print(\u0026#39;before yield\u0026#39;) yield i print(\u0026#39;after yield\u0026#39;) gen = generator(3) print(next(gen)) # 先打印一个 next 产生的值 print(\u0026#39;---\u0026#39;) # 再打印一个分割线 for i in gen: # 再打印 for 循环 print(i) \u0026#39;\u0026#39;\u0026#39; before yield 0 --- after yield before yield 1 after yield before yield 2 after yield \u0026#39;\u0026#39;\u0026#39; lambda 匿名函数\n1 2 add = lambda a,b: a+b print(add(1,2)) 得到可迭代对象：\n1 2 my_lst = [1,2,3,4,5] print(list(map(lambda x: x**2, my_lst))) map() 是 Python 内置的一个高阶函数，它接受一个函数和一个或多个可迭代对象作为参数，并返回一个 迭代器（iterator）。这个迭代器会按顺序将函数应用于可迭代对象中的每个元素，从而产生一个新的结果序列。\n一个按照用户等级，增加用户积分的例子。\n创造一个字典，每一个value是一个函数\n1 2 3 4 5 6 7 8 def user_logging(user): level_credit_map = { 1: lambda x: x+2, 2: lambda x: x+5, 3: lambda x: x+10, 4: lambda x: x+20 } user.credit = level_credit_map[user.level](user.credit) 装饰器 在不该变函数源码的情况下动态调整函数的功能：\n装饰器的输入是一个函数，输出也是一个函数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import time def decorator(func): def wrapper(*args, **kwargs): print(f\u0026#39;{func.__name__}is running\u0026#39;) start_time = time.time() result = func(*args, **kwargs) end_time = time.time() print(f\u0026#39;{func.__name__} excution time: {end_time - start_time} seconds\u0026#39;) return result return wrapper def square(x): return x*x square(2) decorated_square = decorator(square) decorated_square(3) \u0026#39;\u0026#39;\u0026#39; squareis running square excution time: 4.76837158203125e-07 seconds 9 \u0026#39;\u0026#39;\u0026#39; 装饰器生成器：可以按照自己想要的参数生成装饰器： 输入是参数，返回一个装饰器\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import functools def timer(threshold): def decorator(func): @functools.wraps(func) #保持装饰前后函数名称不变 def wrapper(*args, **kwargs): start_time = time.time() result = func(*args, **kwargs) end_time = time.time() if end_time - start_time \u0026gt; threshold: print(f\u0026#39;{func.__name__} took longer than {threshold} seconds\u0026#39;) return result return wrapper return decorator @timer(0.2) def sleep_04(): time.sleep(0.4) # sleep_04 = timer(0.2)(sleep_04) #第二种写法 sleep_04() #sleep_04 took longer than 0.2 seconds 魔法方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 class add: def __init__(self, initial_value=0): # Initialize the internal sum with the provided initial_value. self._sum = initial_value def __call__(self, value): \u0026#34;\u0026#34;\u0026#34; 让类可以像函数一样被调用 Allows the instance to be called like a function. Returns a *new* instance of \u0026#39;add\u0026#39; with the updated sum, enabling method chaining. \u0026#34;\u0026#34;\u0026#34; # Create a new instance of \u0026#39;add\u0026#39; with the current sum plus the new value. return add(self._sum + value) def __add__(self, other): \u0026#34;\u0026#34;\u0026#34; Implements the \u0026#39;+\u0026#39; operator (e.g., addTwo + 5). Allows adding a number to the add instance. \u0026#34;\u0026#34;\u0026#34; if isinstance(other, (int, float)): return self._sum + other # If \u0026#39;other\u0026#39; is another \u0026#39;add\u0026#39; instance, add their internal sums. elif isinstance(other, add): return self._sum + other._sum else: return NotImplemented # Or raise an error for unsupported types def __radd__(self, other): \u0026#34;\u0026#34;\u0026#34; Implements the right-hand side \u0026#39;+\u0026#39; operator (e.g., 5 + addTwo). \u0026#34;\u0026#34;\u0026#34; return self.__add__(other) def __int__(self): \u0026#34;\u0026#34;\u0026#34; Allows converting the instance to an integer (e.g., int(addTwo)). Useful for implicit conversions if needed. \u0026#34;\u0026#34;\u0026#34; return self._sum def __float__(self): \u0026#34;\u0026#34;\u0026#34; Allows converting the instance to a float (e.g., float(addTwo)). \u0026#34;\u0026#34;\u0026#34; return float(self._sum) def __repr__(self): \u0026#34;\u0026#34;\u0026#34; Provides a string representation for debugging. When you just type \u0026#39;addTwo\u0026#39; in the console, this is what gets shown. \u0026#34;\u0026#34;\u0026#34; return f\u0026#34;add({self._sum})\u0026#34; def __str__(self): \u0026#34;\u0026#34;\u0026#34; 字符串表达方法，直接print Provides a user-friendly string representation. \u0026#34;\u0026#34;\u0026#34; return str(self._sum) # Test cases from the image: print(\u0026#34;--- Initializing and Direct Addition ---\u0026#34;) addTwo = add(2) print(f\u0026#34;addTwo: {addTwo}\u0026#34;) # Expected: 2 (due to __str__ or __repr__) print(f\u0026#34;addTwo + 5: {addTwo + 5}\u0026#34;) # Expected: 7 print(\u0026#34;\\n--- Function-like Calls ---\u0026#34;) print(f\u0026#34;addTwo(3): {addTwo(3)}\u0026#34;) # Expected: 5 (returns a new add object representing 5) # To get the numerical value, you\u0026#39;d typically print the object or convert it print(f\u0026#34;addTwo(3) as int: {int(addTwo(3))}\u0026#34;) # Expected: 5 print(f\u0026#34;addTwo(3)(5): {addTwo(3)(5)}\u0026#34;) # Expected: 10 (returns a new add object representing 10) print(f\u0026#34;addTwo(3)(5) as int: {int(addTwo(3)(5))}\u0026#34;) # Expected: 10 print(\u0026#34;\\n--- Test Cases from Image ---\u0026#34;) print(f\u0026#34;add(1)(2): {int(add(1)(2))}\u0026#34;) # Expected: 3 print(f\u0026#34;add(1)(2)(3): {int(add(1)(2)(3))}\u0026#34;) # Expected: 6 print(f\u0026#34;add(1)(2)(3)(4): {int(add(1)(2)(3)(4))}\u0026#34;) # Expected: 10 print(f\u0026#34;add(1)(2)(3)(4)(5): {int(add(1)(2)(3)(4)(5))}\u0026#34;) # Expected: 15 # Verification of object types result_add_1_2 = add(1)(2) print(f\u0026#34;Type of add(1)(2): {type(result_add_1_2)}\u0026#34;) # Should be \u0026lt;class \u0026#39;__main__.add\u0026#39;\u0026gt; \u0026#39;\u0026#39;\u0026#39; --- Initializing and Direct Addition --- addTwo: 2 addTwo + 5: 7 --- Function-like Calls --- addTwo(3): 5 addTwo(3) as int: 5 addTwo(3)(5): 10 addTwo(3)(5) as int: 10 --- Test Cases from Image --- add(1)(2): 3 add(1)(2)(3): 6 add(1)(2)(3)(4): 10 add(1)(2)(3)(4)(5): 15 Type of add(1)(2): \u0026lt;class \u0026#39;__main__.add\u0026#39;\u0026gt; \u0026#39;\u0026#39;\u0026#39; ","date":"2025-05-24T19:59:11+08:00","permalink":"https://DevDreamerCB.github.io/p/cb/","title":"CB"},{"content":"\n","date":"2025-05-24T19:35:22+08:00","permalink":"https://DevDreamerCB.github.io/p/image/","title":"Image"},{"content":"","date":"2025-05-16T10:01:51+08:00","permalink":"https://DevDreamerCB.github.io/p/test/","title":"Test"},{"content":"Hello World ","date":"2025-05-15T22:57:00+08:00","permalink":"https://DevDreamerCB.github.io/p/helloworld/","title":"Helloworld"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://DevDreamerCB.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://DevDreamerCB.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://DevDreamerCB.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://DevDreamerCB.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://DevDreamerCB.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://DevDreamerCB.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://DevDreamerCB.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://DevDreamerCB.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://DevDreamerCB.github.io/p/emoji-support/","title":"Emoji Support"}]